# .github/workflows/build-base-images.yml

name: Build and Push Base Images

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'base_image/**/Dockerfile'
      
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    # 需要权限来读取代码仓库内容并将 package 推送到 ghcr.io
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # 使用这个 action 来找出本次提交中具体发生了变化的 Dockerfile
      # https://github.com/tj-actions/changed-files
      - name: Get changed Dockerfiles
        id: changed_files
        uses: tj-actions/changed-files@v44
        with:
          files: base_image/**/Dockerfile

      # 登录到 GitHub Container Registry
      # 仅当有 Dockerfile 发生变化时才执行
      - name: Log in to GitHub Container Registry
        if: steps.changed_files.outputs.all_changed_files != ''
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 遍历所有变化的 Dockerfile，并为每一个都构建和推送镜像
      - name: Build and push Docker image for each change
        if: steps.changed_files.outputs.all_changed_files != ''
        run: |
          # GITHUB_REPOSITORY 的格式是 "owner/repo-name"，我们需要将其转换为小写
          IMAGE_REPO=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')

          # 遍历由上一步找到的所有变更文件
          for file in ${{ steps.changed_files.outputs.all_changed_files }}; do
            # 从文件路径中提取构建上下文目录 (例如: base_image/php5.6)
            BUILD_CONTEXT=$(dirname "$file")
            # 从构建上下文中提取镜像名称 (例如: php5.6)
            IMAGE_NAME=$(basename "$BUILD_CONTEXT")
            
            # 使用 Git commit SHA 的前7位作为版本标签，确保唯一性
            VERSION=$(echo "${{ github.sha }}" | cut -c1-7)
            
            # 构造完整的镜像ID和标签
            IMAGE_ID="ghcr.io/$IMAGE_REPO/$IMAGE_NAME"

            echo "=========================================================="
            echo "Processing Dockerfile: $file"
            echo "Build Context: $BUILD_CONTEXT"
            echo "Image Name: $IMAGE_NAME"
            echo "Image Tag: $IMAGE_ID:$VERSION"
            echo "Pushing to: $IMAGE_ID"
            echo "=========================================================="

            # 构建镜像
            docker build -t "$IMAGE_ID:$VERSION" -t "$IMAGE_ID:latest" "$BUILD_CONTEXT"
            
            # 推送镜像 (包括 commit 标签和 latest 标签)
            docker push "$IMAGE_ID:$VERSION"
            docker push "$IMAGE_ID:latest"
          done
